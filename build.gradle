/*
 * A program to automatically trade cryptocurrencies.
 * Copyright (C) 2020 Tomas Skalicky
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

group = 'com.skalicky'
version = '0.0.1-SNAPSHOT'

buildscript {
    apply from: "libraries.gradle"

    repositories {
        jcenter()
    }

    dependencies {
        classpath plug_ins.gradle_versions_plugin
    }
}

apply plugin: "com.github.ben-manes.versions"

allprojects {

    logging.captureStandardOutput LogLevel.WARN

    apply from: "$rootDir/libraries.gradle"

    configurations {
        all {
            // https://docs.gradle.org/current/userguide/dependency_management.html#component_selection_rules
            // https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html
            resolutionStrategy {
                // fail eagerly on version conflict (includes transitive dependencies)
                // e.g. multiple different versions of the same dependency (group and name are equal)
                failOnVersionConflict()

                // force certain versions of dependencies (including transitive)
                //  *append new forced modules:
                force libs.commons_lang3
                force libs.guava
                force libs.jackson_annotations
                force libs.jackson_core
                force libs.jackson_databind
                force libs.slf4j_api

                componentSelection {
                    all { final ComponentSelection selection ->
                        final def rejected_substrings = ['alpha', 'beta', 'rc', 'M1']
                        final boolean rejected = rejected_substrings.any { final qualifier ->
                            selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                        }
                        if (rejected) {
                            selection.reject("Rejected substrings $rejected_substrings")
                        }
                    }
                }
            }
        }
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'java-library'

    sourceCompatibility = '11'
    targetCompatibility = '11'

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }
}

tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}
